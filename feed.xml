<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[kaihatsu]]></title><description><![CDATA[development log]]></description><link>http://dev.jgs.me</link><image><url>http://dev.jgs.me/icon.png</url><title>kaihatsu</title><link>http://dev.jgs.me</link></image><generator>RSS for Node</generator><lastBuildDate>Thu, 11 Jun 2015 18:12:36 GMT</lastBuildDate><atom:link href="http://dev.jgs.me/feed.xml" rel="self" type="application/rss+xml"/><author><![CDATA[jigsaw]]></author><copyright><![CDATA[(c) 2015 jigsaw]]></copyright><item><title><![CDATA[Phoenixを触ってみる]]></title><description><![CDATA[Elixirに入門してみたくて、とりあえず文法とか眺めてると眠くなってしまうのでWebフレームワークのPhoenixを触ってみる。

Elixirについては]]></description><link>http://dev.jgs.me/2015/06/11/getting-started-with-phoenix.html</link><guid isPermaLink="true">http://dev.jgs.me/2015/06/11/getting-started-with-phoenix.html</guid><dc:creator><![CDATA[jigsaw]]></dc:creator><pubDate>Thu, 11 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[git stashを使う]]></title><description><![CDATA[
[Git - 作業を隠す](https://git-scm.com/book/ja/v1/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E4%BD%9C%E6%A5%AD%E3%82%92%E9%9A%A0%E3%81%99)
> ある作業が中途半端な状態になっているときに、ブランチを切り替えてちょっとだけ別の作業をしたくなることがあります。中途半端な状態をコミットしてしまうのはいやなので、できればコミットせずにしておいて後でその状態から作業を再開したいものです。そんなときに使うのが git stash コマンドです。]]></description><link>http://dev.jgs.me/2015/06/04/using-git-stash.html</link><guid isPermaLink="true">http://dev.jgs.me/2015/06/04/using-git-stash.html</guid><dc:creator><![CDATA[jigsaw]]></dc:creator><pubDate>Thu, 04 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Gitで誤ってaddしたファイルをステージ対象から取り除く]]></title><description><![CDATA[Gitは`working directory`, `staging area`, `git directory (repository)`という概念があり、これによりプロジェクトを管理してる。

![Local Operations 作業ディレクトリ、ステージング・エリア、Gitディレクトリ](https://git-scm.com/figures/18333fig0106-tn.png)]]></description><link>http://dev.jgs.me/2015/06/03/git-reset-head.html</link><guid isPermaLink="true">http://dev.jgs.me/2015/06/03/git-reset-head.html</guid><dc:creator><![CDATA[jigsaw]]></dc:creator><pubDate>Wed, 03 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[RSpecのletとlet!]]></title><description><![CDATA[RSpecの`let`は[rspec/rspec-core](https://github.com/rspec/rspec-core)の上で[lib/rspec/core/memoized_helpers.rb](https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L284-L297)内に定義されている。同様に`let!`も同ファイルの[352行目あたり](https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L352-L355)から定義されている。

2つのメソッドの違いは、Cucumberのテストの[features/helper_methods/let.feature](https://github.com/rspec/rspec-core/blob/master/features/helper_methods/let.feature)が参考になった。]]></description><link>http://dev.jgs.me/2015/06/03/difference-of-let-and-let!-in-rspec.html</link><guid isPermaLink="true">http://dev.jgs.me/2015/06/03/difference-of-let-and-let!-in-rspec.html</guid><dc:creator><![CDATA[jigsaw]]></dc:creator><pubDate>Wed, 03 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Githubでforkしたリポジトリでオリジナルリポジトリの変更を追従する]]></title><description><![CDATA[Githubでforkしたリポジトリで、オリジナルリポジトリの変更を追従する。

リモートリポジトリとしてオリジナルのリポジトリを`upstream`という名前で設定する。]]></description><link>http://dev.jgs.me/2015/06/02/github-fork-usage.html</link><guid isPermaLink="true">http://dev.jgs.me/2015/06/02/github-fork-usage.html</guid><dc:creator><![CDATA[jigsaw]]></dc:creator><pubDate>Tue, 02 Jun 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[git rebaseを使う]]></title><description><![CDATA[チーム開発をしていてGithub上でPRを送る際に

- レビューのしやすいPRを送る]]></description><link>http://dev.jgs.me/2015/05/26/using-git-rebase.html</link><guid isPermaLink="true">http://dev.jgs.me/2015/05/26/using-git-rebase.html</guid><dc:creator><![CDATA[jigsaw]]></dc:creator><pubDate>Tue, 26 May 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Gitで別ブランチからファイルを取り出す]]></title><description><![CDATA[誤って別の作業ブランチで作業をしてしまいコミットしてしまったときに、そのコミットでの変更ファイルを正しいブランチに戻したいときは`git checkout`を使う。

```]]></description><link>http://dev.jgs.me/2015/05/19/git-checkout-specific-file.html</link><guid isPermaLink="true">http://dev.jgs.me/2015/05/19/git-checkout-specific-file.html</guid><dc:creator><![CDATA[jigsaw]]></dc:creator><pubDate>Tue, 19 May 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[uninitialized constant Sprockets::SassCacheStoreってエラーメッセージが表示される]]></title><description><![CDATA[compass-railsを使おうとしたらステータスコード500と共に

```]]></description><link>http://dev.jgs.me/2015/05/07/uninitialized-constant-Sporkets::SassCacheStore.html</link><guid isPermaLink="true">http://dev.jgs.me/2015/05/07/uninitialized-constant-Sporkets::SassCacheStore.html</guid><dc:creator><![CDATA[jigsaw]]></dc:creator><pubDate>Thu, 07 May 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[このブログについて]]></title><description><![CDATA[このブログは**[jgsme/dev](https://github.com/jgsme/dev)**にインスパイアされて、もともとはクローンしたものに手を加えて作成した。

手を加えたとは言え主にレイアウトだけの修正で、`gulpfile.coffee`とか`wercker.yml`とかには全く手を出せず、`Gulp`は初めて使うし`Wercker`なるサービスも初めて使った。]]></description><link>http://dev.jgs.me/2015/04/21/about_this_blog.html</link><guid isPermaLink="true">http://dev.jgs.me/2015/04/21/about_this_blog.html</guid><dc:creator><![CDATA[jigsaw]]></dc:creator><pubDate>Tue, 21 Apr 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ブログを公開した]]></title><description><![CDATA[いろいろ混在してしまうと思うので、社会人として整理をつけようと思い社会人っぽいブログを目指そうと思う。
]]></description><link>http://dev.jgs.me/2015/04/14/publish_dev-blog.html</link><guid isPermaLink="true">http://dev.jgs.me/2015/04/14/publish_dev-blog.html</guid><dc:creator><![CDATA[jigsaw]]></dc:creator><pubDate>Tue, 14 Apr 2015 00:00:00 GMT</pubDate></item></channel></rss>